// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
)

const getPreference = `-- name: GetPreference :one
SELECT user_id, notify_on_update FROM preference WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetPreference(ctx context.Context, userID int64) (Preference, error) {
	row := q.db.QueryRow(ctx, getPreference, userID)
	var i Preference
	err := row.Scan(&i.UserID, &i.NotifyOnUpdate)
	return i, err
}

const savePreference = `-- name: SavePreference :exec
INSERT INTO preference (user_id, notify_on_update)
VALUES ($1, $2)
ON CONFLICT (user_id)
DO UPDATE SET notify_on_update = EXCLUDED.notify_on_update
`

type SavePreferenceParams struct {
	UserID         int64
	NotifyOnUpdate bool
}

func (q *Queries) SavePreference(ctx context.Context, arg SavePreferenceParams) error {
	_, err := q.db.Exec(ctx, savePreference, arg.UserID, arg.NotifyOnUpdate)
	return err
}
